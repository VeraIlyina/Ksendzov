{
	"info": {
		"_postman_id": "a867632b-8fac-433b-b4ed-2f49f26661a3",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "//162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body text string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql('This is the first responce from server!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "name",
						"value": "Vera",
						"type": "text"
					},
					{
						"key": "age",
						"value": "35",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "//162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3.Спарсить response body в json.\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"User name response == name in request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Vera');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"User age response == age in request\", function () {    \r",
							"    pm.expect(jsonData.age.toNumber()).to.eql(35);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"User salary response == salary in request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(100000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var jsonRequest = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"User name response == user name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"User age response == user age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(jsonRequest.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"User salary response == user salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(jsonRequest.salary.toNumber());\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"User salary 1.5 year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql((jsonRequest.salary).toNumber() * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vera",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "//162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var jsonRequest = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"User name response == user name request\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"User age response == user age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(jsonRequest.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"User salary response == user salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(jsonRequest.salary.toNumber());\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog name param\", function () {\r",
							"    pm.expect('name' in jsonData.family.pets.dog).to.eql(true);\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog age param\", function () {\r",
							"   pm.expect(\"age\" in jsonData.family.pets.dog).to.eql(true);\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vera&age=35&salary=100000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vera"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "100000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "//162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var jsonRequest = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"User name\", function () {\r",
							"pm.expect(jsonData.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"User age\", function () {\r",
							"pm.expect(jsonData.age).to.eql(jsonRequest.age.toNumber());\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(jsonRequest.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0].toString());\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"pm.expect(jsonData.salary[0]).to.eql(jsonRequest.salary.toNumber());\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"pm.expect(jsonData.salary[1].toNumber()).to.eql(jsonRequest.salary * 2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"pm.expect(jsonData.salary[2].toNumber()).to.eql(jsonRequest.salary * 3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Vera\");\r",
							"\r",
							"//16. Создать в окружение переменную age\r",
							"pm.environment.set(\"age\", 35);\r",
							"\r",
							"//17. Создать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 100000);\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.get(\"name\");\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.get(\"age\");\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"pm.test(\"Salary lists\", function () {\r",
							"jsonData.salary.forEach(el => console.log(el.toNumber())) \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vera&age=35&salary=100000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vera"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "100000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "//162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"//7. Спарсить request.\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var jsonBody = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start qa salary\", function () {\r",
							"    pm.expect(\"start_qa_salary\" in jsonData).to.eql(true);\r",
							"    \r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Qa 6 months\", function () {\r",
							"    pm.expect(\"qa_salary_after_6_months\" in jsonData).to.eql(true);\r",
							"    });\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Qa 12 months\", function () {\r",
							"    pm.expect(\"qa_salary_after_12_months\" in jsonData).to.eql(true);\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Qa 1.5 year\", function () {\r",
							"    pm.expect(\"qa_salary_after_1.5_year\" in jsonData).to.eql(true);\r",
							"\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Qa 3.5 years\", function () {\r",
							"    pm.expect(\"qa_salary_after_3.5_years\" in jsonData).to.eql(true);\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person param\", function () {\r",
							"    pm.expect(\"person\" in jsonData).to.eql(true);\r",
							"});\r",
							"\r",
							"//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(jsonBody.salary.toNumber());\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"QA 6 month == salary * 2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql((jsonBody.salary * 2).toNumber());\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"QA 12 month == salary * 2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql((jsonBody.salary * 2.7).toNumber());\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"QA 1.5 year == salary * 3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql((jsonBody.salary * 3.3).toNumber());\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"QA 3.5 year == salary * 3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql((jsonBody.salary * 3.8).toNumber());\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"response u_name[1] == request salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(jsonBody.salary.toNumber());\r",
							"});\r",
							"\r",
							"//20.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"response u_age == request age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(jsonBody.age.toNumber());\r",
							"});\r",
							"\r",
							"//21.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"response u_salary_5_years == request salary * 4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(jsonBody.salary.toNumber() * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"jsonData.person.u_name.forEach(el => console.log(el))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vera",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}